# ==============================================================================
# SCRIPT DE CONFIGURATION POSTGRESQL POUR L'APPLICATION D'√âPARGNE
# ==============================================================================
import os
import psycopg2
from psycopg2.extras import RealDictCursor

def setup_database():
    # R√©cup√©ration de l'URL de la base de donn√©es depuis les variables d'environnement
    database_url = os.environ.get('DATABASE_URL')

    if not database_url:
        print("‚ùå ERREUR : Variable d'environnement DATABASE_URL non d√©finie")
        print("üí° Assurez-vous que DATABASE_URL est configur√©e dans vos variables d'environnement")
        return False

    try:
        # Connexion √† la base de donn√©es PostgreSQL
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()

        print("‚úÖ Connexion √† PostgreSQL r√©ussie")

        # Cr√©ation de la table users
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(80) UNIQUE NOT NULL,
                password VARCHAR(120) NOT NULL,
                security_question TEXT NOT NULL,
                security_answer VARCHAR(120) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'users' cr√©√©e/v√©rifi√©e")

        # Cr√©ation de la table objectifs
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS objectifs (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                nom VARCHAR(200) NOT NULL,
                montant_objectif DECIMAL(10,2) NOT NULL,
                montant_actuel DECIMAL(10,2) DEFAULT 0,
                date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                date_modification TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                archive BOOLEAN DEFAULT FALSE,
                description TEXT
            )
        """)
        print("‚úÖ Table 'objectifs' cr√©√©e/v√©rifi√©e")

        # Cr√©ation de la table transactions
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                objectif_id INTEGER NOT NULL REFERENCES objectifs(id) ON DELETE CASCADE,
                montant DECIMAL(10,2) NOT NULL,
                date_transaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                description TEXT
            )
        """)
        print("‚úÖ Table 'transactions' cr√©√©e/v√©rifi√©e")

        # Cr√©ation de la table t√¢ches
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS taches (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                titre VARCHAR(200) NOT NULL,
                description TEXT,
                date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                date_modification TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                termine BOOLEAN DEFAULT FALSE,
                ordre INTEGER DEFAULT 0
            )
        """)
        print("‚úÖ Table 'taches' cr√©√©e/v√©rifi√©e")

        # Cr√©ation de la table √©tapes
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS etapes (
                id SERIAL PRIMARY KEY,
                tache_id INTEGER NOT NULL REFERENCES taches(id) ON DELETE CASCADE,
                description VARCHAR(500) NOT NULL,
                terminee BOOLEAN DEFAULT FALSE,
                ordre INTEGER NOT NULL,
                date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                date_modification TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'etapes' cr√©√©e/v√©rifi√©e")

        # Validation des changements
        conn.commit()
        print("‚úÖ Toutes les tables ont √©t√© cr√©√©es avec succ√®s !")

        # Test de connexion et affichage des informations
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"üìä Version PostgreSQL : {version[0]}")

        cursor.execute("SELECT COUNT(*) FROM users;")
        nb_users = cursor.fetchone()[0]
        print(f"üë• Nombre d'utilisateurs : {nb_users}")

        cursor.execute("SELECT COUNT(*) FROM objectifs;")
        nb_objectifs = cursor.fetchone()[0]
        print(f"üí∞ Nombre d'objectifs : {nb_objectifs}")

        cursor.execute("SELECT COUNT(*) FROM taches;")
        nb_taches = cursor.fetchone()[0]
        print(f"üìù Nombre de t√¢ches : {nb_taches}")

        cursor.close()
        conn.close()

        print("\nüéâ Configuration PostgreSQL termin√©e avec succ√®s !")
        print("üöÄ Votre application est pr√™te √† √™tre utilis√©e.")

        return True

    except Exception as e:
        print(f"‚ùå ERREUR lors de la configuration : {e}")
        return False

if __name__ == "__main__":
    print("üîß Configuration de la base de donn√©es PostgreSQL...")
    success = setup_database()

    if success:
        print("\n‚úÖ Configuration termin√©e avec succ√®s !")
        print("üí° Vous pouvez maintenant lancer votre application avec : python app.py")
    else:
        print("\n‚ùå √âchec de la configuration")
        print("üí° V√©rifiez vos param√®tres de connexion PostgreSQL")